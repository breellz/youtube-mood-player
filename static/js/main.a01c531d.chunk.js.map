{"version":3,"sources":["context/Mood-context.js","reducers/MoodReducer.js","components/Header.js","components/FrameList.js","components/Frame.js","Selectors/MoodSelector.js","App.js","serviceWorker.js","index.js"],"names":["MoodContext","React","createContext","MoodReducer","state","action","type","id","header","Header","className","FrameList","props","src","videoId","title","Frame","youtubeVideos","useContext","map","youtubeVideo","key","snippet","thumbnail","thumbnails","high","url","MoodSelector","dispatch","useState","setid","mood","setMood","onClick","videos","fetch","then","res","json","data","items","forEach","item","push","catch","error","console","log","App","useReducer","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mLAEMA,EAAcC,IAAMC,gBCDpBC,EAAa,SAACC,EAAOC,GACvB,OAAQA,EAAOC,MACX,IAAK,cACD,OAAQD,EAAOE,GACnB,QACI,OAAOH,ICJbI,EACK,sBADLA,EAEQ,kCAERC,EAAS,kBACX,yBAAKC,UAAU,iBACf,4BAAKF,GACL,4BAAKA,KCIMG,EAXG,SAACC,GACf,IAAMC,EAAG,wCAAoCD,EAAME,SACnD,OACQ,yBAAKJ,UAAU,oBACf,4BAAQG,IAAKA,EAAKE,MAAOH,EAAMG,QAC/B,sCAAYH,EAAMG,SCcfC,EAjBD,WAAO,IAEXC,EADUC,qBAAWlB,GAApBI,MAGP,OAAOa,EACH,yBAAKP,UAAU,SACdO,EAAcE,KAAI,SAACC,GAAD,OAAkB,kBAAC,EAAD,CACjCC,IAAMD,EAAab,GAAGO,QACtBA,QAASM,EAAab,GAAGO,QACzBC,MAASK,EAAaE,QAAQP,MAChCQ,UAAaH,EAAaE,QAAQE,WAAWC,KAAKC,UAC3C,uCCXXC,EAAe,WAAO,IACfC,EAAaV,qBAAWlB,GAAxB4B,SADc,EAEHC,mBAAS,IAFN,mBAEhBtB,EAFgB,KAEZuB,EAFY,OAGAD,mBAAS,IAHT,mBAGhBE,EAHgB,KAGVC,EAHU,KA8BvB,OACH,yBAAKtB,UAAU,WACR,4BAAQuB,QA3BE,WACV,IAAMC,EAAS,GACfF,EAAQ,SACRG,MAAM,uIACDC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAAI,OAAGA,EAAKC,MAAMC,SAAQ,SAACC,GAC7BR,EAAOS,KAAKD,SACZE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC9Bf,EAAMI,GACPN,EAAS,CAAEtB,KAAM,cAAeyB,OAAMxB,SAkB1C,SACA,4BAAQ0B,QAfA,WACR,IAAMC,EAAS,GACfF,EAAQ,OACRG,MAAM,qIACDC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAAI,OAAGA,EAAKC,MAAMC,SAAQ,SAACC,GAC7BR,EAAOS,KAAKD,SACZE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC9Bf,EAAMI,GACPN,EAAS,CAAEtB,KAAM,cAAeyB,OAAMxB,SAM1C,SCjBOyC,G,KAZJ,WAAK,IAAD,EACaC,qBAAW9C,EAAa,IADrC,mBACNC,EADM,KACCwB,EADD,KAGb,OACE,kBAAC5B,EAAYkD,SAAb,CAAsBC,MAAQ,CAAC/C,QAAOwB,aACtC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHgBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,a","file":"static/js/main.a01c531d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst MoodContext = React.createContext()\r\n\r\nexport { MoodContext as default }","\r\nconst MoodReducer =(state, action) => {\r\n    switch (action.type){\r\n        case 'SELECT_MOOD':\r\n            return  action.id\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { MoodReducer as default}","import React from 'react';\r\n\r\nconst header = {\r\n    title: 'Youtube Mood-Player',\r\n    subtitle: 'fetch videos based on your mood'\r\n}\r\nconst Header = () => (\r\n    <div className=\"center header\">\r\n    <h1>{header.title}</h1>\r\n    <h3>{header.subtitle}</h3>\r\n    </div>\r\n)\r\n\r\nexport { Header as default }","import React from 'react';\r\n\r\nconst FrameList = (props)=> {\r\n    const src = `https://www.youtube.com/embed/${props.videoId}`\r\n    return (\r\n            <div className=\"center framelist\">\r\n            <iframe src={src} title={props.title}></iframe>\r\n            <h3>Title: {props.title}</h3>\r\n         </div>\r\n         \r\n    )\r\n}\r\n\r\nexport default FrameList","import React, { useContext } from 'react';\r\nimport MoodContext from '../context/Mood-context'\r\nimport FrameList from './FrameList'\r\n\r\nconst Frame = () => {\r\n    const {state} = useContext(MoodContext)\r\n    const youtubeVideos = state\r\n    \r\n    return(youtubeVideos ?  \r\n        <div className=\"frame\">\r\n        {youtubeVideos.map((youtubeVideo) => <FrameList \r\n            key ={youtubeVideo.id.videoId}\r\n            videoId={youtubeVideo.id.videoId} \r\n            title = {youtubeVideo.snippet.title\r\n        } thumbnail = {youtubeVideo.snippet.thumbnails.high.url} />)}\r\n        </div> : <p>Loading</p>\r\n    )\r\n    \r\n    //\r\n}\r\n\r\nexport default Frame","import React, { useContext, useState } from 'react';\r\nimport MoodContext from '../context/Mood-context'\r\n\r\n\r\nconst MoodSelector = () => {\r\n    const {  dispatch } = useContext(MoodContext)\r\n    const [id, setid] = useState([])\r\n    const [mood, setMood]= useState('')\r\n\r\n    const Happy = () => {\r\n        const videos = []\r\n        setMood('happy')\r\n        fetch('https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=10&q=happy%20songs&key=AIzaSyB6cG0ooaQQN5Gwx2U38mOFddas8eZf4nc')\r\n            .then(res=> res.json())\r\n            .then(data=> data.items.forEach((item)=>{\r\n                videos.push(item)\r\n            })).catch(error => console.log(error))\r\n             setid(videos)\r\n            dispatch({ type: 'SELECT_MOOD', mood, id})\r\n            \r\n    }\r\n\r\n    const Sad = () => {\r\n        const videos = []\r\n        setMood('sad')\r\n        fetch('https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=10&q=sad%20songs&key=AIzaSyB6cG0ooaQQN5Gwx2U38mOFddas8eZf4nc')\r\n            .then(res=> res.json())\r\n            .then(data=> data.items.forEach((item)=>{\r\n                videos.push(item)\r\n            })).catch(error => console.log(error))\r\n             setid(videos)\r\n            dispatch({ type: 'SELECT_MOOD', mood, id})\r\n            \r\n    }\r\n    return (\r\n <div className=\"wrapper\">\r\n        <button onClick = {Happy}>Happy</button>\r\n        <button onClick = {Sad}>Sad</button>\r\n</div>\r\n    )\r\n}\r\n\r\nexport { MoodSelector as default }","import React, {useReducer} from 'react';\r\nimport MoodContext from './context/Mood-context'\r\nimport MoodReducer from './reducers/MoodReducer'\r\nimport Header from './components/Header'\r\n import Frame from './components/Frame'\r\nimport MoodSelector from './Selectors/MoodSelector'\r\nimport './styles/styles.scss'\r\n\r\nconst App =()=>{\r\n  const [state, dispatch] = useReducer(MoodReducer, [])\r\n\r\n  return (\r\n    <MoodContext.Provider value ={{state, dispatch}}>\r\n    <Header />\r\n    <MoodSelector />\r\n    <Frame />\r\n    </MoodContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}